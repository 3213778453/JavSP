name: CI 构建

on:
  push:
    branches:
      - master  # 监听 push 到 master 分支

jobs:
  qemu:
    name: 使用 QEMU 进行跨架构构建
    runs-on: ubuntu-latest  # 使用 Ubuntu 环境运行该作业

    steps:
      # 步骤 1: 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 步骤 2: 设置 QEMU 支持 ARM64 架构
      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64  # 设置目标架构为 ARM64

      # 步骤 3: 使用 ARM64 架构的 Docker 镜像运行 Python 环境，并安装 cmake
      - name: 使用 ARM64 架构的 Python 镜像并安装 cmake
        run: |
          docker run --rm \
            -v $PWD:/workspace \
            -w /workspace \
            --platform linux/arm64 \
            python:3.12-slim bash -c "
            apt-get update && \
            apt-get install -y cmake build-essential && \
            pip install poetry && \
            poetry install && \
            poetry run python setup.py build_exe -b dist"  # 执行构建

      # 步骤 4: 使用 file 命令检查生成的二进制文件架构
      - name: 检查构建产物架构
        run: |
          file dist/JavSP  # 验证生成的文件架构是否为 ARM64
          
          # 输出文件架构信息
          if [[ $(file dist/JavSP) == *"aarch64"* ]]; then
            echo "构建成功，生成的文件为 ARM64 架构"
          else
            echo "构建失败，生成的文件不是 ARM64 架构"
            exit 1  # 如果文件架构不是 ARM64，则退出并标记构建失败
          fi

      # 步骤 5: 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: 构建产物-${{ github.sha }}
          path: dist
